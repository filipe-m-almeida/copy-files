#!/usr/bin/env python3
"""
Script for concatenating files into a copy-paste buffer for iterative development.

This script allows you to easily concatenate multiple files into a single copy-paste buffer,
which can be pasted into a chat interface with ChatGPT. It is particularly useful when you
need to provide code context to ChatGPT.

Usage: python script.py [file1] [file2] ...

Example: python script.py src/*

After running the script, the concatenated file contents will be copied to the clipboard.
You can then paste the clipboard contents into ChatGPT for further use.

Key Bindings:
  ? or h: Show the help screen
  Enter: Perform an action on selected files
  Space: Toggle selection of current file
  c: Check all files
  s: Uncheck all files
  t: Toggle selection of files
  q or esc: Exit the program

Author: Filipe Almeida <filipe.almeida@gmail.com>
 
"""

from pathlib import Path
import pyperclip
import sys
import urwid

def comment_style(file):
    return '#' if Path(file).suffix in ['.py', '.rb', '.r', '.sh', '.pl', '.php'] else '//'

def exit_on_q(key):
    if key in ('q', 'Q', 'esc'):
        raise urwid.ExitMainLoop()
    elif key in ('?', 'h'):
        show_help_overlay()

class HelpFrame(urwid.Frame):
    def keypress(self, size, key):
        loop.widget = listbox
        return super().keypress(size, key)

def show_help_overlay():
    help_text = urwid.Text("    Key Bindings:")
    key_bindings_text = urwid.Text("""
      ? or h: Show this help screen
      Enter: Perform action on selected files
      Space: Toggle selection of current file
      c: Check all files
      s: Uncheck all files
      t: Toggle selection of files""")
    help_padding = urwid.Padding(urwid.Pile([help_text, key_bindings_text]), align='center')
    help_frame = HelpFrame(urwid.Filler(help_padding), focus_part='body')
    loop.widget = help_frame


def get_selected():
    selected = []
    for checkbox in checkboxes:
        if checkbox.get_state():
            selected.append(checkbox.get_label())
    # Read, comment and copy selected files to clipboard
    file_contents = [f"{comment_style(f)} File {f}\n{Path(f).read_text()}" for f in selected]
    pyperclip.copy("\n".join(file_contents))
    raise urwid.ExitMainLoop()

class CustomCheckBox(urwid.CheckBox):
    _metaclass_ = urwid.MetaSignals
    signals = ['close']

    def keypress(self, size, key):
        if key == 'enter':
            get_selected()
        elif key == 'c':
            for checkbox in checkboxes:
                checkbox.set_state(False)
        elif key == 's':
            for checkbox in checkboxes:
                checkbox.set_state(True)
        elif key == 't':
            for checkbox in checkboxes:
                checkbox.set_state(not checkbox.get_state())
        elif key in ('?', 'h'):
            show_help_overlay()
        else:
            return super().keypress(size, key)
    
# Get all files in current directory
files = sys.argv[1:]
files.sort()

checkboxes = [CustomCheckBox(f, True) for f in files]

def back_to_main(_):
    loop.widget = listbox

for checkbox in checkboxes:
    urwid.connect_signal(checkbox, 'close', back_to_main)

listwalker = urwid.SimpleFocusListWalker(checkboxes)

listbox = urwid.ListBox(listwalker)

loop = urwid.MainLoop(listbox, unhandled_input=exit_on_q)

loop.run()
